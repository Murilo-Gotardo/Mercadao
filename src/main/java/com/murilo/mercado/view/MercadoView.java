/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.murilo.mercado.view;

import com.formdev.flatlaf.FlatDarkLaf;
import com.murilo.mercado.controller.CadastroProdutoController;
import com.murilo.mercado.controller.LoginController;
import com.murilo.mercado.controller.MercadoController;
import com.murilo.mercado.model.ClienteModel;
import com.murilo.mercado.model.ProdutoModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import util.TimeManager;
import com.murilo.mercado.model.MercadoModel;

/**
 *
 * @author murilo
 */
public class MercadoView extends javax.swing.JFrame {

    private ClienteModel cliente;
    private double valorTotal;
    private final CadastroProdutoController cadastroProdutoController = new CadastroProdutoController();
    private final MercadoController mercadoController = new MercadoController();
    private final LoginController loginController = new LoginController();

    public MercadoView() {
    }

    /**
     * Creates new form Compra
     *
     * @param cliente
     */
    public MercadoView(ClienteModel cliente) {
        setCliente(cliente);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        produtos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        produtosTable = new javax.swing.JTable();
        adicionaAoCarrinhoBTN = new javax.swing.JButton();
        carrinho = new javax.swing.JPanel();
        generateNFE = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        carrinhoTable = new javax.swing.JTable();
        valorCarrinhoLabel = new javax.swing.JLabel();
        removeBTN = new javax.swing.JButton();
        greeting = new javax.swing.JLabel();
        logoutBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mercado");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(750, 600));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(100, 100));

        java.awt.GridBagLayout produtosLayout = new java.awt.GridBagLayout();
        produtosLayout.columnWidths = new int[] {0};
        produtosLayout.rowHeights = new int[] {0, 5, 0};
        produtos.setLayout(produtosLayout);

        produtosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Descricao", "Peso", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        produtosTable.setColumnSelectionAllowed(true);
        produtosTable.getTableHeader().setReorderingAllowed(false);
        produtosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                produtosTableMouseClicked(evt);
            }
        });
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Aplicando o renderizador de célula a todas as colunas da tabela
        for (int i = 0; i < produtosTable.getColumnCount(); i++) {
            produtosTable.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
        jScrollPane1.setViewportView(produtosTable);
        produtosTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        DefaultTableModel model = (DefaultTableModel) produtosTable.getModel();
        if (!MercadoModel.getProdutos().isEmpty()) {
            for (ProdutoModel produto : MercadoModel.getProdutos()) {
                Object[] row = {
                    produto.getId(),
                    produto.getNome(),
                    produto.getDescricao(),
                    produto.getPeso(),
                    produto.getValor()
                };
                model.addRow(row);
            }
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        produtos.add(jScrollPane1, gridBagConstraints);

        adicionaAoCarrinhoBTN.setText("Adicionar ao carrinho");
        adicionaAoCarrinhoBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionaAoCarrinhoBTNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        produtos.add(adicionaAoCarrinhoBTN, gridBagConstraints);

        jTabbedPane1.addTab("Produtos", produtos);

        java.awt.GridBagLayout carrinhoLayout = new java.awt.GridBagLayout();
        carrinhoLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        carrinhoLayout.rowHeights = new int[] {0, 5, 0};
        carrinho.setLayout(carrinhoLayout);

        generateNFE.setText("Gerar NF-e");
        generateNFE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNFEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        carrinho.add(generateNFE, gridBagConstraints);

        carrinhoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        carrinhoTable.setColumnSelectionAllowed(true);
        carrinhoTable.getTableHeader().setReorderingAllowed(false);
        carrinhoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carrinhoTableMouseClicked(evt);
            }
        });
        DefaultTableCellRenderer rendererCarrinho = new DefaultTableCellRenderer();
        rendererCarrinho.setHorizontalAlignment(SwingConstants.CENTER);

        // Aplicando o renderizador de célula a todas as colunas da tabela
        for (int i = 0; i < carrinhoTable.getColumnCount(); i++) {
            carrinhoTable.getColumnModel().getColumn(i).setCellRenderer(rendererCarrinho);
        }
        jScrollPane3.setViewportView(carrinhoTable);
        carrinhoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        DefaultTableModel carrinhoModel = (DefaultTableModel) carrinhoTable.getModel();
        if (!cliente.getProdutos().isEmpty()) {
            for (ProdutoModel produto : cliente.getProdutos()) {
                Object[] row = {
                    produto.getNome(),
                    produto.getValor()
                };
                carrinhoModel.addRow(row);
            }
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        carrinho.add(jScrollPane3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        carrinho.add(valorCarrinhoLabel, gridBagConstraints);

        removeBTN.setText("Remover");
        removeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBTNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        carrinho.add(removeBTN, gridBagConstraints);

        jTabbedPane1.addTab("Carrinho", carrinho);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 9;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        greeting.setText(TimeManager.getGretting() + ", " + getCliente().getNome());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(greeting, gridBagConstraints);

        logoutBTN.setText("Sair");
        logoutBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBTNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        getContentPane().add(logoutBTN, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void produtosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_produtosTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_produtosTableMouseClicked

    private void adicionaAoCarrinhoBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionaAoCarrinhoBTNActionPerformed
        // TODO add your handling code here:

        DefaultTableModel tableModel = (DefaultTableModel) produtosTable.getModel();

        // Criando uma lista para armazenar os dados da linha selecionada
        List<Object> rowData = new ArrayList<>();
        
        int rowIndex = produtosTable.getSelectedRow();

        for (int columnIndex = 0; columnIndex < tableModel.getColumnCount(); columnIndex++) {
            Object value = tableModel.getValueAt(rowIndex, columnIndex);
            rowData.add(value);
        }
        
        Object[] carrinhoArray = new Object[3];
        
        carrinhoArray[0] = rowData.get(0);
        carrinhoArray[1] = rowData.get(1);
        carrinhoArray[2] = rowData.get(4);

        // Adicionando a lista como uma nova linha na tabela de destino
        DefaultTableModel carrinhoTableModel = (DefaultTableModel) carrinhoTable.getModel();
        carrinhoTableModel.addRow(carrinhoArray);
        int id = ((Number) rowData.get(0)).intValue();
        cliente.getProdutos().add(mercadoController.getProdutoById(id));
        
        valorTotal += ((Number) rowData.get(4)).doubleValue();

        valorCarrinhoLabel.setText("Valor Total R$" + valorTotal);
    }//GEN-LAST:event_adicionaAoCarrinhoBTNActionPerformed

    private void carrinhoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carrinhoTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_carrinhoTableMouseClicked

    private void logoutBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBTNActionPerformed
        loginController.logout(this);
        loginController.createView();
    }//GEN-LAST:event_logoutBTNActionPerformed

    private void generateNFEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNFEActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showSaveDialog(null);
        
        String path = fileChooser.getSelectedFile().getAbsolutePath();
        
        mercadoController.createNFE(cliente, valorTotal, path);
        
        cadastroProdutoController.flushTable(carrinhoTable);
    }//GEN-LAST:event_generateNFEActionPerformed

    private void removeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBTNActionPerformed
        // TODO add your handling code here:
        int removedProdutoId = cadastroProdutoController.removeProdutoFromTable(carrinhoTable);
        double valueRemoved = cliente.getProdutos().stream()
                .filter(p -> p.getId() == removedProdutoId)
                .findFirst()
                .orElseThrow()
                .getValor();
        cliente.getProdutos().removeIf(p -> p.getId() == removedProdutoId);
        
        valorTotal -= valueRemoved;
        valorCarrinhoLabel.setText("Valor Total R$" + valorTotal);
    }//GEN-LAST:event_removeBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MercadoView().setVisible(true);
        });
    }

    public ClienteModel getCliente() {
        return cliente;
    }

    private void setCliente(ClienteModel cliente) {
        this.cliente = cliente;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionaAoCarrinhoBTN;
    private javax.swing.JPanel carrinho;
    private javax.swing.JTable carrinhoTable;
    private javax.swing.JButton generateNFE;
    private javax.swing.JLabel greeting;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logoutBTN;
    private javax.swing.JPanel produtos;
    private javax.swing.JTable produtosTable;
    private javax.swing.JButton removeBTN;
    private javax.swing.JLabel valorCarrinhoLabel;
    // End of variables declaration//GEN-END:variables
}
